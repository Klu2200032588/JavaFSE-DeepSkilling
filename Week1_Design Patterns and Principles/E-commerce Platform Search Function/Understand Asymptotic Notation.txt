o	Explain Big O notation and how it helps in analyzing algorithms.

Big-O is a way to express the upper bound of an algorithm’s time or space complexity. It helps developers understand how an algorithm scales and performs as the input grows.

O(1): Constant time – performance doesn't change with input size.
O(n): Linear time – performance grows proportionally with input size.
O(log n): Logarithmic time – performance grows slowly as input size increases.
O(n²): Quadratic time – performance grows rapidly with input size.


o	Describe the best, average, and worst-case scenarios for search operations.

Best Case: The scenario where the algorithm performs the minimum number of operations (e.g., finding the item at the first index).

Average Case: The expected performance across all possible inputs.

Worst Case: The scenario where the algorithm performs the maximum number of operations (e.g., item is at the last index or not present).